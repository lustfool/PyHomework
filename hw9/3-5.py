# 3. Напишите функцию to_dict(lst), которая принимает аргумент в виде списка и
# возвращает словарь, в котором каждый элемент
# списка является и ключом и значением. Предполагается,
# что элементы списка будут соответствовать
# правилам задания ключей в словарях.

def to_dict(lst):
    return {el: el for el in lst}


print(to_dict([22, 33, 'abc', (1, 9)]))

# 4. Иван решил создать самый большой словарь в мире. Для этого он придумал функцию
# biggest_dict(**kwargs), которая принимает неограниченное количество параметров «ключ: значение» и
# обновляет созданный им словарь my_dict, состоящий всего из одного элемента «first_one» со значением «we can do it».
# Воссоздайте эту функцию.

some_dict = {'first_one': 'we can do it'}


def biggest_dict(**kwargs):
    some_dict.update(**kwargs)


biggest_dict(a=1, b=2, c='three', z='last', yx=(1, 2))
print(some_dict)


# 5. Дана строка в виде случайной последовательности чисел от 0 до 9.
#
# Требуется создать словарь, который в качестве ключей будет принимать данные числа (т. е. ключи будут типом int),
# а в качестве значений – количество этих чисел в имеющейся последовательности. Для построения словаря создайте функцию
# count_it(sequence), принимающую строку из цифр. Функция должна возвратить словарь из 3-х самых часто встречаемых чисел.

def count_it(num):
    num_frequency = {int(i): num.count(i) for i in num}
    sorted_num_frequency = sorted(num_frequency.items(), key=lambda element: element[1])
    return dict(sorted_num_frequency[-1:-4:-1])


print(count_it('1111222333445'))
print(count_it('897539457354494857943857434573'))
